name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres_password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Install Bitwarden CLI
        run: |
          curl -L --output bw.zip 'https://vault.bitwarden.com/download/?app=cli&platform=linux'
          unzip bw.zip
          chmod +x bw
          sudo mv bw /usr/local/bin/
          rm bw.zip

      - name: Log in to Bitwarden
        run: |
          bw config server https://vault.bitwarden.com/
          bw login --apikey --raw
        env:
          BW_CLIENTID: ${{ secrets.BITWARDEN_CLIENTID }}
          BW_CLIENTSECRET: ${{ secrets.BITWARDEN_CLIENTSECRET }}

      - name: Unlock Bitwarden and fetch secrets
        run: |
          # Unlock vault and get session key
          BW_SESSION=$(bw unlock --raw ${{ secrets.BITWARDEN_ACCESS_TOKEN }})
          echo "BW_SESSION=$BW_SESSION" >> $GITHUB_ENV

          # Get secrets from the testing_keys project
          PROJECT_ID="${{ secrets.BWS_PROJECT_ID }}"
          
          # List all items in the project and process them
          bw list items --projectid $PROJECT_ID --session $BW_SESSION | jq -c '.[]' | while read -r item; do
            # Extract key and value from each item
            key=$(echo $item | jq -r '.name')
            value=$(echo $item | jq -r '.notes')
            
            # Set as environment variable
            echo "$key=$value" >> $GITHUB_ENV
          done

      - name: Set test environment variables
        run: |
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
          echo "TESTING_DB_HOST=localhost" >> $GITHUB_ENV
          echo "TESTING_DB_PORT=5432" >> $GITHUB_ENV
          echo "TESTING_DB_USER=postgres" >> $GITHUB_ENV
          echo "TESTING_DB_PASS=postgres_password" >> $GITHUB_ENV
          echo "TESTING_DB_NAME=postgres" >> $GITHUB_ENV
          echo "TESTING_REDIS_HOST=localhost" >> $GITHUB_ENV
          echo "TESTING_REDIS_PORT=6379" >> $GITHUB_ENV
          echo "TESTING_BROKER_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "TESTING_RESULT_BACKEND=redis://localhost:6379/0" >> $GITHUB_ENV

      - name: Run tests with coverage
        run: |
          pytest --cov=standard_pipelines --cov-report=term-missing

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: .coverage
